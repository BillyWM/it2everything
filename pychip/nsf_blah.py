#!/usr/bin/env python --
#
# "blah" by Ben "GreaseMonkey" Russell, 2010 - public domain
#
# took a lot of butchering to get this as small as it is
# nevertheless, this REFUSES to conform to 2KB
#
# now to either port this tune to or build an nsf player in java
# the former seems more likely / doable
# would just need to make some arrays

import struct

import pychip

asm = pychip.Asm6502(0x00000,0x8000,0x840)

xtb = [0]*4+[
	0x0800|int(pychip.CLK_PAL/((2.0**((i+3.0)/12.0))*880.0*2.0*16.0)+1) for i in xrange(36)
]

xtbs = struct.pack("<"+"H"*len(xtb),*xtb)

noisetab = [
	0x00,0x00,0x00,0x00<<3, # reserved
	0x01,0x00,0x0D,0x00<<3, # kick
	0x02,0x00,0x06,0x02<<3, # snare
	0x01,0x00,0x02,0x00<<3, # hat closed
	0x2F,0x00,0x06,0x00<<3, # crash
]

tunetab = [
	# melod A
	[
		0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
		0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
		0x00,
	],
	[
		0x14,0x11,0x14,0x11,0x0F,0x11,0x14,0x11,
		0x16,0x14,0x16,0x18,0x19,0x01,0x18,0x01,
	],
	[
		0x14,0x11,0x14,0x11,0x0F,0x11,0x14,0x11,
		0x16,0x14,0x12,0x11,0x0F,0x11,0x12,0x11,
		0x00,
	],
	[
		0x14,0x11,0x14,0x11,0x0F,0x11,0x14,0x11,
		0x0F,0x0D,0x0C,0x0D,0x0A,0x0D,0x0F,0x12,
		0x00,
	],
	[
		0x14,0x11,0x14,0x11,0x0F,0x11,0x14,0x11,
		0x16,0x14,0x16,0x18,0x19,0x1B,0x1D,0x1E,
		0x00,
	],
	[i+12 for i in [
		0x14,0x11,0x14,0x11,0x0F,0x11,0x14,0x11,
		0x16,0x14,0x16,0x18,0x19,0x01-12,0x18,0x01-12,
	]],
	[i+12 for i in [
		0x14,0x11,0x14,0x11,0x0F,0x11,0x14,0x11,
		0x16,0x14,0x12,0x11,0x0F,0x11,0x12,0x11,
		0x00-12
	]],
	[i+12 for i in [
		0x14,0x11,0x14,0x11,0x0F,0x11,0x14,0x11,
		0x0F,0x0D,0x0C,0x0D,0x0A,0x0D,0x0F,0x12,
		0x00-12
	]],
	# bass A
	[
		0x0F,0x02,0x0F,0x02,0x0F,0x02,0x0F,0x02,
		0x0F,0x02,0x0F,0x02,0x0F,0x02,0x0F,0x02,
		0x0F,0x02,0x0F,0x02,0x0F,0x02,0x0F,0x02,
		0x11,0x02,0x11,0x02,0x11,0x02,0x11,0x02,
		0x00,
	],
	[
		0x12,0x02,0x12,0x02,0x12,0x02,0x12,0x02,
		0x12,0x02,0x12,0x02,0x12,0x02,0x12,0x02,
		0x12,0x02,0x12,0x02,0x12,0x02,0x12,0x02,
		0x14,0x02,0x14,0x02,0x14,0x02,0x14,0x02,
		0x00,
	],
	[
		0x16,0x02,0x16,0x02,0x16,0x02,0x16,0x02,
		0x16,0x02,0x16,0x02,0x16,0x02,0x16,0x02,
		0x16,0x02,0x16,0x02,0x16,0x02,0x16,0x02,
		0x19,0x02,0x19,0x02,0x19,0x02,0x19,0x02,
		0x00,
	],
	[
		0x14,0x02,0x14,0x02,0x14,0x02,0x14,0x02,
		0x14,0x02,0x14,0x02,0x12,0x02,0x12,0x02,
		0x11,0x02,0x11,0x02,0x11,0x02,0x11,0x02,
		0x0F,0x02,0x0F,0x02,0x0C,0x02,0x08,0x02,
		0x00,
	],
	[
		0x0F,0x02,0x0F+12,0x02,0x0F,0x01,0x0F+12,0x02,
		0x0F,0x02,0x0F+12,0x02,0x0F,0x01,0x0F+12,0x02,
		0x0F,0x02,0x0F+12,0x02,0x0F,0x01,0x0F+12,0x02,
		0x11,0x02,0x11+12,0x02,0x11,0x01,0x11+12,0x02,
		0x00,
	],
	[
		0x12,0x02,0x12+12,0x02,0x12,0x01,0x12+12,0x02,
		0x12,0x02,0x12+12,0x02,0x12,0x01,0x12+12,0x02,
		0x12,0x02,0x12+12,0x02,0x12,0x01,0x12+12,0x02,
		0x14,0x02,0x14+12,0x02,0x14,0x01,0x14+12,0x02,
		0x00,
	],
	[
		0x16,0x02,0x16+12,0x02,0x16,0x01,0x16+12,0x02,
		0x16,0x02,0x16+12,0x02,0x16,0x01,0x16+12,0x02,
		0x16,0x02,0x16+12,0x02,0x16,0x01,0x16+12,0x02,
		0x19,0x02,0x19+12,0x02,0x19,0x01,0x19+12,0x02,
		0x00,
	],
	[
		0x14,0x02,0x14+12,0x02,0x14,0x01,0x14+12,0x02,
		0x14,0x02,0x14+12,0x02,0x12,0x01,0x12+12,0x02,
		0x11,0x02,0x11+12,0x02,0x11,0x01,0x11+12,0x02,
		0x0F,0x02,0x0F+12,0x02,0x0C,0x01,0x08+12,0x02,
		0x00,
	],
	# drums A
	[
		0x04,0x01,0x0C,0x01,0x08,0x01,0x0C,0x01,
		0x04,0x01,0x0C,0x01,0x08,0x01,0x0C,0x01,
		0x00,
	],
	[
		0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
		0x04,0x0C,0x0C,0x0C,0x08,0x01,0x0C,0x01,
		0x00,
	],
	[
		0x04,0x01,0x0C,0x01,0x08,0x01,0x0C,0x01,
		0x04,0x01,0x08,0x01,0x08,0x01,0x0C,0x01,
		0x00,
	],
	[
		0x04,0x01,0x0C,0x01,0x08,0x01,0x0C,0x04,
		0x08,0x01,0x04,0x04,0x08,0x01,0x04,0x01,
		0x00,
	],
	[
		0x04,0x01,0x04,0x01,0x0C,0x01,0x04,0x01,
		0x08,0x01,0x01,0x01,0x0C,0x01,0x04,0x01,
		0x00,
	],
	[
		0x04,0x01,0x01,0x01,0x0C,0x01,0x04,0x01,
		0x08,0x01,0x01,0x01,0x0C,0x01,0x04,0x01,
		0x00,
	],
	# melod B
	[
		0x0F,0x01,0x16,0x01,0x19,0x01,0x1B,0x01,
		0x01,0x01,0x01,0x01,0x01,0x01,0x16,0x02,
		0x19,0x01,0x1B,0x01,0x19,0x01,0x16,0x01,
		0x14,0x01,0x01,0x01,0x16,0x01,0x02,0x01,
		0x00,
	],
	[
		0x0F,0x01,0x16,0x01,0x19,0x01,0x1B,0x01,
		0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
		0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
		0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
		0x00,
	],
	[
		0x12,0x01,0x16,0x01,0x19,0x01,0x1B,0x01,
		0x01,0x01,0x01,0x01,0x01,0x01,0x16,0x02,
		0x19,0x01,0x1B,0x01,0x19,0x01,0x16,0x01,
		0x14,0x01,0x01,0x01,0x12,0x01,0x02,0x01,
		0x00,
	],
	[
		0x11,0x01,0x16,0x01,0x18,0x01,0x19,0x01,
		0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
		0x0F,0x01,0x12,0x01,0x16,0x01,0x17,0x01,
		0x01,0x01,0x01,0x01,0x16,0x01,0x01,0x01,
		0x00,
	],
	[
		0x0F,0x01,0x16,0x01,0x19,0x01,0x1B,0x01,
		0x01,0x01,0x01,0x01,0x01,0x01,0x19,0x02,
		0x20,0x01,0x1E,0x01,0x1D,0x01,0x1B,0x01,
		0x19,0x01,0x01,0x01,0x1B,0x01,0x01,0x01,
		0x00,
	],
	[
		0x14,0x01,0x18,0x01,0x19,0x01,0x1A,0x01,
		0x01,0x01,0x01,0x01,0x1B,0x01,0x01,0x01,
		0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
		0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
		0x00,
	],
	# melod C
	[
		0x0F,0x12,0x16,0x1B,0x20,0x1B,0x16,0x12,
		0x0F,0x12,0x16,0x1B,0x20,0x1B,0x16,0x12,
		0x00,
	],
	[
		0x0F,0x12,0x17,0x1B,0x1E,0x1B,0x17,0x12,
		0x0F,0x12,0x17,0x1B,0x1E,0x1B,0x17,0x12,
		0x00,
	],
	# bass B
	[
		0x0F,0x16,0x0F+12,0x16,0x0F,0x16,0x0F+12,0x16,
		0x0F,0x16,0x0F+12,0x16,0x0F,0x16,0x0F+12,0x16,
		0x0F,0x16,0x0F+12,0x16,0x0F,0x16,0x0F+12,0x16,
		0x11,0x17,0x11+12,0x17,0x11,0x17,0x11+12,0x17,
		0x00,
	],
	[
		0x12,0x19,0x12+12,0x19,0x12,0x19,0x12+12,0x19,
		0x12,0x19,0x12+12,0x19,0x12,0x19,0x12+12,0x19,
		0x12,0x19,0x12+12,0x19,0x12,0x19,0x12+12,0x19,
		0x14,0x1B,0x14+12,0x1B,0x14,0x1B,0x14+12,0x1B,
		0x00,
	],
	[
		0x16,0x1D,0x16+12,0x1D,0x16,0x1D,0x16+12,0x1D,
		0x16,0x1D,0x16+12,0x1D,0x16,0x1D,0x16+12,0x1D,
		0x16,0x1D,0x16+12,0x1D,0x16,0x1D,0x16+12,0x1D,
		0x19,0x20,0x19+12,0x20,0x19,0x20,0x19+12,0x20,
		0x00,
	],
	[
		0x14,0x1B,0x14+12,0x1B,0x14,0x1B,0x14+12,0x1B,
		0x14,0x1B,0x14+12,0x1B,0x12,0x17,0x12+12,0x17,
		0x11,0x16,0x11+12,0x16,0x11,0x16,0x11+12,0x16,
		0x0F,0x14,0x0F+12,0x14,0x0C,0x12,0x08+12,0x12,
		0x00,
	],
	# drums B
	[
		0x08,0x01,0x04,0x01,0x08,0x01,0x01,0x04,
		0x08,0x01,0x04,0x01,0x08,0x01,0x04,0x01,
		0x00,
	],
	[
		0x08,0x04,0x08,0x04,0x08,0x04,0x08,0x04,
		0x08,0x04,0x08,0x04,0x08,0x04,0x08,0x04,
		0x08,0x04,0x08,0x04,0x08,0x04,0x08,0x04,
		0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
		0x00,
	],
	[
		0x10,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
		0x01,0x01,0x01,0x01,0x02,0x01,0x01,0x01,
		0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
		0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
		0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
		0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
		0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
		0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
		0x00,
	],
	# bass C
	[
		0x0A,0x01,0x01,0x01,0x02,0x01,0x01,0x01,
		0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
		0x00,
	],
	[
		0x14,0x11,0x14,0x11,0x0F,0x11,0x14,0x11,
		0x0F,0x0D,0x0C,0x0D,0x0C,0x01,0x08,0x01,
		0x00
	],
	
]

ordtab_noise = [
	0x00,0x00,0x00,0x00,
	
	0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x11,
	
	0x10,0x10,0x10,0x12,
	0x10,0x10,0x10,0x13,
	
	0x10,0x10,0x10,0x12,
	0x10,0x10,0x10,0x13,
	
	0x14,0x15,0x14,0x15,
	0x14,0x15,0x14,0x15,
	
	0x10,0x10,0x10,0x12,
	0x10,0x10,0x10,0x13,
	
	0x10,0x10,0x10,0x12,
	0x10,0x10,0x10,0x13,
	
	0x10,0x10,0x10,0x12,
	0x22,0x22,0x23,
	
	0x24,
	0x00,
]

ordtab_p1 = [
	0x02,0x01,0x03,
	
	0x02,0x01,0x03,
	0x02,0x01,0x04,
	
	0x06,0x05,0x07,
	0x06,0x05,0x07,
	
	0x02,0x01,0x03,
	0x02,0x01,0x04,
	
	0x02,0x01,0x03,
	0x02,0x01,0x04,
	
	0x02,0x01,0x03,
	0x02,0x01,0x04,
	
	0x06,0x05,0x07,
	0x06,0x05,0x07,
	
	0x06,0x05,0x07,
	0x06,0x05,0x07,
	
	0x00,0x00,0x00,0x00,
	0x00,
]

ordtab_p2 = [
	0x00,0x00,0x00,0x00,
	
	0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,
	
	0x02,0x01,0x03,
	0x02,0x01,0x03,
	
	0x06,0x05,0x07,
	0x06,0x05,0x07,
	
	0x16,0x17,
	0x18,0x19,
	
	0x1A,0x1B,
	0x18,0x19,
	
	0x1C,0x9C,0x1D,0x1D,
	0x1C,0x1C,0x1D,0x1D,
	
	0x1C,0x1C,0x1D,0x1D,
	0x1C,0x1C,0x1D,0x1D,
	
	0x00,0x00,0x00,0x00,
	0x00,
]

ordtab_tri = [
	0x00,0x00,0x00,0x00,
	
	0x08,0x09,
	0x0A,0x0B,
	
	0x0C,0x0D,
	0x0E,0x0F,
	
	0x0C,0x0D,
	0x0E,0x0F,
	
	0x08,0x09,
	0x0A,0x0B,
	
	0x08,0x09,
	0x0A,0x0B,
	
	0x0C,0x0D,
	0x0E,0x0F,
	
	0x1E,0x1F,
	0x20,0x21,
	
	0x02,0x01,0x26,
	0x25,
]

# this was useful for debugging
SKIP = 64*0

a = [SKIP,SKIP,SKIP,SKIP]
while a[0] > 0 or a[1] > 0 or a[2] > 0 or a[3] > 0:
	if a[0] > 0:
		a[0] -= len(tunetab[ordtab_p1[0]&0x7F])-1
		ordtab_p1.append(ordtab_p1.pop(0))
	if a[1] > 0:
		a[1] -= len(tunetab[ordtab_p2[0]&0x7F])-1
		ordtab_p2.append(ordtab_p2.pop(0))
	if a[2] > 0:
		a[2] -= len(tunetab[ordtab_tri[0]&0x7F])-1
		ordtab_tri.append(ordtab_tri.pop(0))
	if a[3] > 0:
		a[3] -= len(tunetab[ordtab_noise[0]&0x7F])-1
		ordtab_noise.append(ordtab_noise.pop(0))

ordtab_p1.append(0xFF)
ordtab_p2.append(0xFF)
ordtab_tri.append(0xFF)
ordtab_noise.append(0xFF)

#for v in xtb:
#	print hex(v)

asm.add_label("ram_task_sel",0x03)
asm.add_label("ram_task_base",0x80)

# this part is simple.
asm.parse("""
@_nsf_load
	rts
@_nsf_init
	lda #@<ram_task_base
	sta @<ram_task_sel
	lda #$05
	sta $04
	sta $05
	lda #$80
	sta @<ram_task_base
	
	lda #@>task_speed
	ldy #@<task_speed
	jsr @sys_newtask
	lda #@>task_p1_wave
	ldy #@<task_p1_wave
	jsr @sys_newtask
	lda #@>task_p2_wave
	ldy #@<task_p2_wave
	jsr @sys_newtask
	lda #@>task_p1_note
	ldy #@<task_p1_note
	jsr @sys_newtask
	lda #@>task_tri_note
	ldy #@<task_tri_note
	jsr @sys_newtask
	lda #@>task_p2_note
	ldy #@<task_p2_note
	jsr @sys_newtask
	lda #@>task_noise_note
	ldy #@<task_noise_note
	jsr @sys_newtask
	rts

@_nsf_play
	dec $04
	
	jsr @sys_next
	
	lda $04
	bne @ret1
	lda $05
	sta $04
@ret1
	rts
""")

asm.parse("""
@task_p1_wave
	lda #$01
	sta $0200
	lda #%01100010
	sta $0201
	
@lp_task_p1_wave
	jsr @sys_next
	lda $04
	bne @lp_task_p1_wave
	dec $0200
	bne @lp_task_p1_wave
	lda #$04
	sta $0200
	clc
	lda $0201
	adc #$40
	sta $0201
	jmp @lp_task_p1_wave
""")

asm.parse("""
@task_speed
	lda #$05
	sta $05
@lp2_task_speed
	lda #$02
	sta $0206
@lp_task_speed
	jsr @sys_next
	lda $04
	bne @lp_task_speed
	dec $0206
	bne @lp_task_speed
	ldx @<ram_tri_po
	lda @ordtab_tri,x
	cmp #$25
	bne @task_speed
	inc $05
	jmp @lp2_task_speed
""")

asm.parse("""
@task_p2_wave
	lda #%01000001
	sta $0203
	lda $0201
	and #%11000000
	ora #%00000010
	sta $0201
@lp_task_p2_wave
	jsr @sys_next
	ldx @ram_p2_po
	lda @ordtab_p2,x
	beq @task_p2_wave
	cmp #$9C
	beq @task_p2_wave
	lda #$17
	sta $02
	@lp_task_p2_wave_elongate
		lda @ordtab_p2,x
		cmp $02
		beq @task_p2_wave_long
		inc $02
		lda $02
		cmp #$1C
		bne @lp_task_p2_wave_elongate
	jmp @lp_task_p2_wave
	
@task_p2_wave_long
	lda #%00000011
	sta $0203
	lda $0201
	and #%11000000
	ora #%00000000
	sta $0201
	
	lda $04
	bne @lp_task_p2_wave
	lda $0201
	sta $4000
	lda $0202
	sta $4003
	
	jmp @lp_task_p2_wave
""")

asm.add_label("ram_p1_pl",0x70)
asm.add_label("ram_p1_ph",0x71)
asm.add_label("ram_p1_po",0x72)

asm.add_label("ram_p2_pl",0x73)
asm.add_label("ram_p2_ph",0x74)
asm.add_label("ram_p2_po",0x75)

asm.add_label("ram_tri_pl",0x76)
asm.add_label("ram_tri_ph",0x77)
asm.add_label("ram_tri_po",0x78)

asm.add_label("ram_noise_pl",0x79)
asm.add_label("ram_noise_ph",0x7A)
asm.add_label("ram_noise_po",0x7B)

TASK_NOTE_TPL = """
@task_[1]_note
	lda #$00
	sta @<ram_[1]_po
@task_[1]_note_neword
	ldx @<ram_[1]_po
	lda @ordtab_[1],x
	cmp #$FF
	beq @task_[1]_note
	inx
	stx @<ram_[1]_po
	asl
	tax
	lda @pattab,x
	sta @<ram_[1]_pl
	inx
	lda @pattab,x
	sta @<ram_[1]_ph
@lp_task_[1]_note
	jsr @sys_next
	lda $04
	bne @lp_task_[1]_note
	
	lda (@<ram_[1]_pl),y
	cmp #$01
	beq @task_[1]_note_skip
	cmp #$02
	beq @task_[1]_note_stop
	
	[2]
@task_[1]_note_skip
	
	inc @<ram_[1]_pl
	bne @jx_task_[1]_note_incph
		inc @<ram_[1]_ph
	@jx_task_[1]_note_incph
	
	lda (@<ram_[1]_pl),y
	beq @task_[1]_note_neword
	jmp @lp_task_[1]_note
"""

asm.parse(TASK_NOTE_TPL.replace("[2]","""
	asl
	tax
	
	lda @notetab,x
	sta $4002
	inx
	lda @notetab,x
	sta $0202
	sta $4003
	lda $0201
	sta $4000
	jmp @task_[1]_note_skip
	
@task_[1]_note_stop
	lda #%10110000
	sta $4000
""").replace("[1]","p1"))

asm.parse(TASK_NOTE_TPL.replace("[2]","""
	asl
	tax
	
	lda @notetab,x
	sta $400A
	inx
	lda @notetab,x
	sta $400B
	lda #%11000000
	sta $4008
	jmp @task_[1]_note_skip
@task_[1]_note_stop
	lda #%00000000
	sta $4008
""").replace("[1]","tri"))

asm.parse(TASK_NOTE_TPL.replace("[2]","""
	asl
	tax
	
	lda @notetab,x
	sta $4006
	inx
	lda @notetab,x
	sta $4007
	lda $0203
	sta $4004
	jmp @task_[1]_note_skip
	
@task_[1]_note_stop
	lda #%10110000
	sta $4004
""").replace("[1]","p2"))

asm.parse(TASK_NOTE_TPL.replace("[2]","""
	tax
	
	lda @noisetab,x
	sta $400C
	inx
	inx
	lda @noisetab,x
	sta $400E
	inx
	lda @noisetab,x
	sta $400F
	jmp @task_[1]_note_skip
@task_[1]_note_stop
	lda #%00110000
	sta $400C
""").replace("[1]","noise"))

# task struct: exists, A, X, Y, PCH, PCL
asm.parse("""
@sys_next
	stx $02
	ldx @<ram_task_sel
	sta $01,x
	lda $02
	sta $02,x
	sty $03,x
	pla
	sta $04,x
	pla
	sta $05,x
	
	inx
	inx
	inx
	inx
	inx
	inx
	
	lda $00,x
	bne @jx_sys_next_goback
		ldx #@<ram_task_base
	@jx_sys_next_goback
	stx @<ram_task_sel
	
	lda $05,x
	pha
	lda $04,x
	pha
	ldy $03,x
	lda $02,x
	sta $02
	lda $01,x
	ldx $02
	rts
""")

# sys_newtask requires A=PCH,Y=PCL
# assumes first task is scheduled
# sets a=x=y=0 for that task
asm.parse("""
@sys_newtask
	sta $02
	ldx #@<ram_task_base
	@lp_sys_newtask_skippy
		inx
		inx
		inx
		inx
		inx
		inx
		lda $00,x
		bne @lp_sys_newtask_skippy
	dey
	sty $04,x
	lda $02
	sta $05,x
	lda #$80
	sta $00,x
	lda #$00
	sta $03,x
	sta $02,x
	sta $01,x
	sta $06,x
	rts
""")

# really simple.
# unused, though.
'''
asm.parse("""
@sys_halt
	jsr @sys_next
	jmp @sys_halt
""")
'''

asm.binary(noisetab,256,"noisetab")
asm.binary(ordtab_p2,256,"ordtab_p2")
asm.binary(struct.pack("<"+"H"*len(tunetab),*[0 for i in xrange(len(tunetab))]),256,"pattab")
k = asm.rpc-len(tunetab)*2
asm.binary(xtbs,256,"notetab")
asm.binary(ordtab_tri,256,"ordtab_tri")
asm.binary(ordtab_p1,256,"ordtab_p1")
asm.binary(ordtab_noise,256,"ordtab_noise")
#asm.binary(struct.pack("<"+"H"*len(tunetab),*[asm.labels["TUNETAB_"+str(i)] for i in xrange(len(tunetab))]),256,"pattab")
for i in xrange(len(tunetab)):
	asm.mem[k+2*i] = (asm.mpc) & 0xFF
	asm.mem[k+2*i+1] = (asm.mpc) >> 8
	
	asm.binary(tunetab[i],1,"tunetab_"+str(i))
	print len(tunetab[i]),
print

asm.store_labels()
asm.save_nsf("blah.nsf",{
	'songcount': 1,
	'songstart': 1,
	'name': "blah (pychip + task sched test)",
	'author': "GreaseMonkey",
	'copyright': "2010, PD",
	'banks': [0,1,2,3,4,5,6,7],
	'speedntsc': 0x441A,
	'speedpal': 0x4E20,
	'palntsc': 0x01,
	'extensions': 0x00,
})

print len(ordtab_p1),len(ordtab_p2),len(ordtab_tri),len(ordtab_noise)
print sum(len(k) for k in tunetab)
print "%i %04X" % (asm.mlim,asm.mlim)
