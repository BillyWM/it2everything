false	equ $00 ; asmx -o sunds.bin -b 61440 -w -e -C 6502 sunds.a65 && stella sunds.bin; exit

; IT2TIA driver by Ben "GreaseMonkey" Russell, 2011 - PUBLIC DOMAIN
; TODO: fix flickering

; 2600 defines
; WRITE REGISTERS
VSYNC	equ $00
VBLANK	equ $01
WSYNC	equ $02
RSYNC	equ $03
NUSIZ0	equ $04
NUSIZ1	equ $05
COLUP0	equ $06
COLUP1	equ $07
COLUPF	equ $08
COLUBK	equ $09
CTRLPF	equ $0A
REFP0	equ $0B
REFP1	equ $0C
PF0	equ $0D
PF1	equ $0E
PF2	equ $0F
RESP0	equ $10
RESP1	equ $11
RESM0	equ $12
RESM1	equ $13
RESBL	equ $14
AUDC0	equ $15
AUDC1	equ $16
AUDF0	equ $17
AUDF1	equ $18
AUDV0	equ $19
AUDV1	equ $1A
GRP0	equ $1B
GRP1	equ $1C
ENAM0	equ $1D
ENAM1	equ $1E
ENABL	equ $1F
HMP0	equ $20
HMP1	equ $21
HMM0	equ $22
HMM1	equ $23
HMBL	equ $24
VDELP0	equ $25
VDELP1	equ $26
VDELBL	equ $27
RESMP0	equ $28
RESMP1	equ $29
HMOVE	equ $2A
HMCLR	equ $2B
CXCLR	equ $2C

; READ REGISTERS
CXM0P	equ $00
CXM1P	equ $01
CXP0FB	equ $02
CXP1FB	equ $03
CXM0FB	equ $04
CXM1FB	equ $05
CXBLPF	equ $06
CXPPMM	equ $07
INPT0	equ $08
INPT1	equ $09
INPT2	equ $0A
INPT3	equ $0B
INPT4	equ $0C
INPT5	equ $0D

; OTHER REGISTERS
SWCHA	equ $280
SWACNT	equ $281
SWCHB	equ $282
SWBCNT	equ $283
INTIM	equ $284
TIM1T	equ $294
TIM8T	equ $295
TIM64T	equ $296
T1024T	equ $297

; LOCAL VALUES
; Output stuff
Ch0Wob	equ $80 ; Channel 0 period finetune shift register
Ch1Wob	equ $81 ; Channel 1 period finetune shift register
Ch0Per	equ $82 ; Channel 0 playback period
Ch1Per	equ $83 ; Channel 1 playback period
Ch0Vol	equ $84 ; Channel 0 playback volume (0..63)
Ch1Vol	equ $85 ; Channel 1 playback volume (0..63)
; Pattern things
Ch0PeP	equ $86 ; Channel 0 pattern period
Ch1PeP	equ $87 ; Channel 1 pattern period
Ch0PeS	equ $88 ; Channel 0 period slide
Ch1PeS	equ $89 ; Channel 1 period slide
Ch0VoS	equ $8A ; Channel 0 volume slide
Ch1VoS	equ $8B ; Channel 1 volume slide
; Global playback things
CurOrd	equ $B0 ; Order
CurPat	equ $B1 ; Pattern
PatPtr	equ $B2 ; Pointer to pattern
OPTabl	equ $B4 ; Order / Pattern Table Pointer
CurRow	equ $B6 ; Rows Remaining
CurClk	equ $B7 ; Clocks / Ticks Remaining

; CONSTANTS
; Effects

; ACTUAL CODE
	org $F000
	
	db <testord1,<testord1,<testord1,<testord2
testord1
	dw testpat1
testord2
	dw testpat2
	
testpat1
	db $03
	db Ch0PeP, 96
	db Ch0Vol, 48
	db Ch1Vol, 0
	db $06
	db Ch0PeP, 98
	db Ch0PeS, 2
	db $80, 0
	db $06
	db Ch0PeP, 241
	db Ch0PeS, 0
	db $80, 0
	db $06
	db Ch0PeP, 130
	db $80, 0
	db $06
	
testpat2
	db $04
	db Ch0PeP, 150
	db $80, 0
	db $80, 0
	db $06
	db Ch0PeP, 130
	db $80, 0
	db $80, 0
	db $06
	db Ch0PeP, 150
	db $80, 0
	db $80, 0
	db $06
	db Ch0PeP, 130
	db $80, 0
	db CurOrd, 0
	db $06
	
	
	db "ORDERLIST/PATTERNLIST REGION GOES IN THIS 256-BYTE AREA FROM $F000 THROUGH $F0FF."
	db " THANK YOU FOR FLYING ESPERNET. OR IT2TIA. OR WHATEVER. --Ben ",34,"GreaseMonkey",34," Russell. "
	align 256
	dw itstorageptr
start
	sei
	cld
	ldx #$FF
	txs
	lda #$00
	ldx #$00
	
	; Clear memory / registers
clearmem
	sta $00,x
	inx
	bne clearmem
	
	; Set up sound things
	lda #12
	sta AUDC0
	sta AUDC1
	lda #$10
	sta Ch0Per
	sta Ch1Per
	lda #$00
	sta Ch0Wob
	sta Ch1Wob
	lda #0
	sta Ch0Vol
	lda #0
	sta Ch1Vol
	
	lda #$00
	sta OPTabl
	lda #$F0
	sta OPTabl+1
	
	lda #$00
	sta CurOrd
	lda #$01
	sta CurRow
	sta CurClk
	
	ldy #$00 ; Line Counter
	sta WSYNC
	jmp resync
	
wobble_table
	db %00000000 ; 0
	db %01010101 ; 4
	db %00010001 ; 2
	db %01110111 ; 6
	db %00000001 ; 1
	db %01101101 ; 5
	db %01001001 ; 3
	db %01111111 ; 7
	
	align 256
resync
	; STUTTER BABY STUTTER COUGH AND SPLUTTER
	; (only for 6 lines out of 262, 5 here, 1 on vblank off)
	
	; 68 cycles for this gap before WSYNC.
	lda #$00 ; 2 (66)
	sta VSYNC ; 3 (63)
	sta VBLANK ; 3 (60)
	
	dec CurClk ; 5 (55)
	bne norowchange ; 2 skip (53)
	dec CurRow ; 5 (48)
	bne nopatchange ; 2 skip (46)
	
	; note that Y = 0
	ldy CurOrd ; 3 (43)
	lda (OPTabl),y ; 5 (38)
	tay ; 3 (35)
	lda (OPTabl),y ; 5 (38)
	sta PatPtr ; 3 (32)
	iny ; 2 (30)
	lda (OPTabl),y ; 5 (25)
	ldy #$00 ; 2 (23)
	sta PatPtr+1 ; 3 (20)
	lda (PatPtr),y ; 5 (15)
	sta CurRow ; 3 (12)
	iny ; 2 (10)
	inc CurOrd ; 5 (5)
	
nopatchange
	sta WSYNC ; WS 1A
	
	; 68 cycles until LDA imm / WSYNC.
	lda (PatPtr),y ; 5 [5]
	tax ; 2 [7]
	iny ; 2 [9]
	lda (PatPtr),y ; 5 [14]
	sta $00,x ; 4 [18]
	iny ; 2 [20]
	lda (PatPtr),y ; 5 [5]
	tax ; 2 [7]
	iny ; 2 [9]
	lda (PatPtr),y ; 5 [14]
	sta $00,x ; 4 [18]
	iny ; 2 [20]
	lda (PatPtr),y ; 5 [5]
	tax ; 2 [7]
	iny ; 2 [9]
	lda (PatPtr),y ; 5 [14]
	sta $00,x ; 4 [18]
	iny ; 2 [20] -- 60 total -- 68-60 -> 8 cycles left
	
	lda #$02 ; 2 (6)
	sta WSYNC ; WS 2A
	sta VSYNC
	sta VBLANK
	
	lda (PatPtr),y ; 5
	sta CurClk ; 3
	iny ; 2
	
	tya ; 2
	clc ; 2
	adc PatPtr ; 3
	sta PatPtr ; 3
	bcc nopatpagechange ; 2 skip
	inc PatPtr+1 ; 5
	ldy #$00 ; 2
nopatpagechange
	
	jmp didrowchange
	
norowchange
	sta WSYNC ; WS 1B
	
	lda #$02
	sta WSYNC ; WS 2B
	sta VSYNC
	sta VBLANK
	
	jmp didrowchange
mainlp
	sta WSYNC ; 73 cycles. Here we go.
	iny ; 2
	beq resync ; 2 on skip
mainlp_skp1
	cpy #33 ; 2
	bne novboff ; 3 on jump
	
	lda #$00
	sta WSYNC ; This is the 6th and final blown line.
	sta VBLANK
novboff
	; 61 cycles left before a jump is required.
	lda Ch0Wob ; 3 (58)
	asl ; 2 (56)
	adc #$00 ; 2 (54)
	sta Ch0Wob ; 3 (51)
	lsr ; 2 (49)
	lda Ch0Per ; 3 (46)
	adc #$00 ; 2 (44)
	sta AUDF0 ; 3 (41)
	
	lda Ch1Wob ; 3 (38)
	asl ; 2 (36)
	adc #$00 ; 2 (34)
	sta Ch1Wob ; 3 (31)
	lsr ; 2 (29)
	lda Ch1Per ; 3 (26)
	adc #$00 ; 2 (24)
	sta AUDF1 ; 3 (21)
	
	; 21 cycles remain.
	tya
	sta COLUBK
	lda #$00
	sta COLUBK
	
	jmp mainlp

didrowchange
	sta WSYNC ; WS 3
	
	; set sound parameter things
	
	clc
	lda Ch0Vol
	adc Ch0VoS
	sta Ch0Vol
	lsr
	lsr
	sta AUDV0
	clc
	lda Ch1Vol 
	adc Ch1VoS
	sta Ch1Vol
	lsr
	lsr
	sta AUDV1
	
	clc
	lda Ch0PeP
	adc Ch0PeS
	sta Ch0PeP
	clc
	lda Ch1PeP
	adc Ch1PeS
	sta Ch1PeP
	
	sta WSYNC ; WS 4
	
	; set periods
	
	lda Ch0PeP
	sta Ch0Per
	lda #$00
	lsr Ch0Per
	rol
	lsr Ch0Per
	rol
	lsr Ch0Per
	rol
	tax
	lda wobble_table,x
	sta Ch0Wob
	
	lda Ch1PeP
	sta Ch1Per
	lda #$00
	lsr Ch1Per
	rol
	lsr Ch1Per
	rol
	lsr Ch1Per
	rol
	tax
	lda wobble_table,x
	sta Ch1Wob
	
	lda #$00
	sta WSYNC ; WS 5. Done.
	sta VSYNC
	
	jmp mainlp_skp1 ; 3

itstorageptr
	db "WRITE STUFF HERE. (Check $F100 (0x0100 in file) for pointer to here.)"
	
	org $FFFC
	dw start
	dw start
	